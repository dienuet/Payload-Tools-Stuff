require 'net/http'
require 'json'
require 'colorize'

  def header_parser(url)
    
    begin
      res = Net::HTTP.get_response(URI(url))
      #puts "Message Code: #{res.code}"
      case res
      when Net::HTTPSuccess then
        if res['server'].nil?
          puts "Server Field Is Not Set at header_parser Method."
          return false
        else
          tmp1 = res['server'].split
          tmp1 = tmp1[0].split('/')
          return tmp1
        end
      when Net::HTTPRedirection then
        location = res['location']
        puts "Ridirected To #{location}"
        header = Net::HTTP.get_response(URI(location))
        #puts "Message Code: #{header.code}"
        if header['server'].nil?
          puts "Server Field Is Not Set at header_parser Method."
          return false
        else
          tmp2 = header['server'].split
          tmp2 = tmp2[0].split('/')
          return tmp2
        end
      else
        puts "Something Is Wrrong at header_parser Method."
        return false 
      end
    rescue
      puts "Unable To Connect To URL Address at header_parser Method."
      return false
    end

  end

  def CVE_Finder(info)

    url_api = 'http://vulners.com/api/v3/burp/software/?utm_source=scanner&utm_medium=chromePlugin&utm_campaign=scan'
    params = {"software":"#{info[0]}","version":"#{info[1]}","type":"#{info[2]}"}
    json_headers = {"Content-Type" => "application/json",
                "Accept" => "*/*"}

    url_api = URI.parse(url_api)
    http = Net::HTTP.new(url_api.host, url_api.port)
    response = http.post(url_api.path, params.to_json, json_headers)
    html_json = JSON.parse(response.body)
    if /error/i.match(html_json["result"])
      puts "CVE Not Found OR Not Vulerable !".red
    else
      index = 1
      puts "[*] CVE Found".blue
      arr = html_json["data"]["search"]
      arr.each do |i|
        puts "[#{index}] #{i["_source"]["id"]}".blue
        exploit_Finder(i["_source"]["id"])
        puts "    [+] href: #{i["_source"]["href"]}"
        puts "    [+] description: #{i["_source"]["description"]}"
        puts "------------------------------------------"
        index += 1
      end
    end

  end
  
  def exploit_Finder(cve)
    
    url_api = "https://vulners.com/api/v3/search/lucene/?query=type:exploitdb #{cve}"
    begin
      res = Net::HTTP.get_response(URI(url_api))
      case res
      when Net::HTTPSuccess then
        html_json = JSON.parse(res.body)
        if html_json["data"]["total"] != 0
          puts "    [+] PoC : Found - URL: #{html_json["data"]["search"][0]["_source"]["href"]}".green
        else
          puts "    [+] PoC : No".red
        end
      else
        puts "Something Is Wrrong at Exploit_Finder Method."
        return false 
      end
    rescue
      puts "Unable To Connect To URL Address at Exploit_Finder Method."
      return false
    end

  end

  def run_Finder
    target = ARGV[0]
    if target.nil?
      puts "[*] URL Still Not Set".blue
      puts "[*] NOTE: This Tool requires colorize libary - To Install : gem install colorize".red
      puts "[*] Usage : ruby tool-CVE-Finder.rb http://target.com/ - Written in Ruby 2.3.1 Version".blue
      exit
    end
    info = header_parser(target)
    if info == false
      return 0
    end
    puts "\n[ Written By @dienpv - np : date 11:16:2017]\n".red
    puts "Server Name: #{info[0]}"
    puts "Version: #{info[1]}"
    puts "------------------------------------------"
    puts "Finding all CVE for #{info[0]}-#{info[1]}".green
    if /iis/i.match(info[0])
      info.delete_at(0)
      info.insert(0,"cpe:/a:microsoft:iis")
      info.insert(2,"cpe")
      CVE_Finder(info)
    elsif /apache/i.match(info[0])
      info.delete_at(0)
      info.insert(0,"httpd")
      info.insert(2,"software")
      CVE_Finder(info)
    elsif /nginx/i.match(info[0])
      info.delete_at(0)
      info.insert(0,"cpe:/a:nginx:nginx")
      info.insert(2,"cpe")
      CVE_Finder(info)
    end
  end
  run_Finder
